Root PureComponentParent (Tic Tac Toe Home)
state : currentUserName, 2dCellList, playerList
field : Array<Array<string>>

-- TicTacToeTr rowIndex, 2dCellList, playerList
-- -- TicTacToeTd rowIndex, columnIndex, 2dCellList, playerList

Td에서는, 현재 유저이름과 playerList랑 서로 비교해서
같으면 X 다르면 O (아니면 나중에 이미지로 바꿀 수도 있고, 확장 가능함)

Td하나 클릭시,
(1) 이미 선택된 곳이면 반응없도록.
(2) 이미 선택된 곳이 아니면 해당 유저로 마킹할 수 있도록, TicTacToeHome ==> TicTacToeTd까지 setState를 넘겨주기.
(3) 해당 유저가 3줄 완성했는지 체크할 수 있어야함. (가로 세로 양대각선)
(4) 만약 누군가 이겼으면 Win메시지.

TicTacToe

private hasSelectedUsers: Set<string>
private winner: string
private readonly _2dCellList: Array<Array<string>>에 setter없애고 getter만 넣기.

public constructor(squareCount)
안에서 2dCellList 초기화

public mark(selectIndex: [number, number], selectUserName: string): void

if winner없고 && 해당 index에 값 없으면
    username 넣기.

private checkWinner(selectIndex: [number, number], selectUserName: string)
정방향이면 대각까지,
아니면 가로세로만.
각 cell에 user이름으로 몇개있는지 filter로 숫자세기.

public getWinner(): userName -- 누구 이겼으면 그사람이름. 없으면 null

///

<생각정리과정>

한쪽 유저는 1
다른 한쪽 유저는 -1
한쪽방향 다 더해서 1이면 1유저 win
-1 다 더해서 -3이면 -1유저 win

1과 -1에 대해 매핑이 필요할거같은데?
또 이 1과 -1에 대해 플레이어 1 2로 나누고,
이 플레이어 1과 2가 또 각 플레이어의 이름과 또 매칭이 되야하는데? 매칭이 2번이나 필요해서 너무 안좋음.

그리고, 정가운데를 선택했다면, 가로세로대각대각 다 뒤져야하지만,
구석을 선택했다면 2개만 체크해보면 되니까 연산의 횟수도 줄여봄직함.

그리고, Component에 로직을 최대한 제거해야, Vue로도 가뿐하게 옮길 수 있음.
